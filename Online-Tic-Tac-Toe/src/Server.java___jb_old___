import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;

public class Server {

    ArrayList<Socket> gamers = new ArrayList<>();
    ArrayList<Socket> clients = new ArrayList<>();
    ArrayList<ArrayList<String>> data = new ArrayList<>();

    ExecutorService executor = Executors.newFixedThreadPool(40);

    static ReadWriteLock lock = new ReentrantReadWriteLock();


    public void listenSocket() {
        ServerSocket server = null;
        Socket client = null;
        Thread finder = new Thread(()->{
            while (true){
                if(gamers.size()>=2){
                    lock.writeLock().tryLock();
                    executor.execute(new Contest(gamers.get(0),gamers.get(1)));
                    gamers.remove(gamers.get(0));
                    gamers.remove(gamers.get(1));
                    lock.writeLock().unlock();
                }
            }
        });
        finder.start();
        try {
            server = new ServerSocket(3333);
        }
        catch (IOException e) {
            System.out.println("Could not listen");
            System.exit(-1);
        }

        while(true) {
            try {
                client = server.accept();
            }
            catch (IOException e) {
                System.out.println("Accept failed");
                System.exit(-1);
            }
            lock.writeLock().tryLock();
            clients.add(client);
            lock.writeLock().unlock();
        }

    }

    public static void main(String[] args) {
       new Server().listenSocket();
    }
}
